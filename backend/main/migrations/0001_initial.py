# Generated by Django 4.2.3 on 2023-10-16 11:46

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("address", models.CharField(max_length=255)),
                ("pic", models.CharField(max_length=100)),
                ("telephone", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("website", models.CharField(max_length=100)),
                ("timezone", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Lot",
            fields=[
                (
                    "id",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
                ("chamber", models.IntegerField()),
                ("start_time", models.DateTimeField()),
                ("complete_time", models.DateTimeField(null=True)),
                ("program_name", models.CharField(max_length=100, null=True)),
                ("total_commands", models.PositiveSmallIntegerField(null=True)),
                ("species", models.CharField(default="none", max_length=100)),
                ("quantity", models.FloatField(default=0)),
                ("details", models.CharField(max_length=100, null=True)),
                ("duration", models.DurationField(null=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="main.company"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[],
            options={
                "verbose_name": "group",
                "verbose_name_plural": "groups",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.group",),
            managers=[
                ("objects", django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name="StatusReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chamber", models.PositiveSmallIntegerField()),
                ("time", models.DateTimeField()),
                ("server_time", models.DateTimeField(auto_now_add=True)),
                ("status_code", models.IntegerField()),
                ("details", models.CharField(max_length=100, null=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="main.company"
                    ),
                ),
                (
                    "lot",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="main.lot",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LotData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("time", models.DateTimeField()),
                ("command_name", models.CharField(max_length=100)),
                ("wbt1", models.FloatField()),
                ("wbt2", models.FloatField(null=True)),
                ("dbt1", models.FloatField()),
                ("dbt2", models.FloatField(null=True)),
                ("rh", models.FloatField(null=True)),
                ("targetdbt", models.FloatField(null=True)),
                ("targetwbt", models.FloatField(null=True)),
                ("mc1", models.FloatField()),
                ("mc2", models.FloatField()),
                ("mc3", models.FloatField()),
                ("mc4", models.FloatField()),
                ("mc5", models.FloatField(null=True)),
                ("mc6", models.FloatField(null=True)),
                ("mc7", models.FloatField(null=True)),
                ("mc8", models.FloatField(null=True)),
                ("amc", models.FloatField()),
                ("wood_temp1", models.FloatField(null=True)),
                ("wood_temp2", models.FloatField(null=True)),
                ("flaps", models.PositiveSmallIntegerField(null=True)),
                ("heat", models.PositiveSmallIntegerField(null=True)),
                ("spray", models.PositiveSmallIntegerField(null=True)),
                ("fan_cw", models.PositiveSmallIntegerField(null=True)),
                ("fan_ccw", models.PositiveSmallIntegerField(null=True)),
                ("reserved", models.FloatField(null=True)),
                ("details", models.CharField(max_length=100, null=True)),
                (
                    "lot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lot_data",
                        to="main.lot",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CompanyAPIKey",
            fields=[
                (
                    "id",
                    models.CharField(
                        editable=False,
                        max_length=150,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("prefix", models.CharField(editable=False, max_length=8, unique=True)),
                ("hashed_key", models.CharField(editable=False, max_length=150)),
                ("created", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "name",
                    models.CharField(
                        default=None,
                        help_text="A free-form name for the API key. Need not be unique. 50 characters max.",
                        max_length=50,
                    ),
                ),
                (
                    "revoked",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Once API key expires, clients cannot use it anymore.",
                        null=True,
                        verbose_name="Expires",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to="main.company",
                    ),
                ),
            ],
            options={
                "verbose_name": "Company API key",
                "verbose_name_plural": "Company API keys",
                "ordering": ("-created",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.company",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "auth_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
